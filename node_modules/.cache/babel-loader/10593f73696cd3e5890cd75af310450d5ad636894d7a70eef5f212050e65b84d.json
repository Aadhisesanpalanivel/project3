{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ABINASH\\\\OneDrive\\\\Desktop\\\\Event_manage_wind\\\\src\\\\context\\\\EventContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventContext = /*#__PURE__*/createContext();\nconst API_URL = 'http://localhost:5000/api';\nexport const EventProvider = ({\n  children\n}) => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch all events\n  const fetchEvents = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get(`${API_URL}/events`);\n      setEvents(response.data);\n      setError(null);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error fetching events');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new event\n  const createEvent = async eventData => {\n    setLoading(true);\n    try {\n      const response = await axios.post(`${API_URL}/events`, eventData);\n      setEvents(prevEvents => [...prevEvents, response.data]);\n      setError(null);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error creating event');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register for event\n  const registerForEvent = async eventId => {\n    setLoading(true);\n    try {\n      const response = await axios.post(`${API_URL}/events/${eventId}/register`);\n      setEvents(prevEvents => prevEvents.map(event => event._id === eventId ? response.data.event : event));\n      setError(null);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      setError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Error registering for event');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Unregister from event\n  const unregisterFromEvent = async eventId => {\n    setLoading(true);\n    try {\n      const response = await axios.post(`${API_URL}/events/${eventId}/unregister`);\n      setEvents(prevEvents => prevEvents.map(event => event._id === eventId ? response.data.event : event));\n      setError(null);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      setError(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Error unregistering from event');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get user's registered events\n  const getUserRegisteredEvents = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get(`${API_URL}/events/user/registered`);\n      setError(null);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Error fetching registered events');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get user's created events\n  const getUserCreatedEvents = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get(`${API_URL}/events/user/created`);\n      setError(null);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      setError(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Error fetching created events');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch events on mount\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(EventContext.Provider, {\n    value: {\n      events,\n      loading,\n      error,\n      createEvent,\n      registerForEvent,\n      unregisterFromEvent,\n      getUserRegisteredEvents,\n      getUserCreatedEvents,\n      fetchEvents\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_s(EventProvider, \"IypEFUpYSOCpKPwAV3AhILeIRe0=\");\n_c = EventProvider;\nexport const useEvents = () => {\n  _s2();\n  const context = useContext(EventContext);\n  if (!context) {\n    throw new Error('useEvents must be used within an EventProvider');\n  }\n  return context;\n};\n_s2(useEvents, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"EventProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","EventContext","API_URL","EventProvider","children","_s","events","setEvents","loading","setLoading","error","setError","fetchEvents","response","get","data","_error$response","_error$response$data","message","createEvent","eventData","post","prevEvents","_error$response2","_error$response2$data","registerForEvent","eventId","map","event","_id","_error$response3","_error$response3$data","unregisterFromEvent","_error$response4","_error$response4$data","getUserRegisteredEvents","_error$response5","_error$response5$data","getUserCreatedEvents","_error$response6","_error$response6$data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useEvents","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ABINASH/OneDrive/Desktop/Event_manage_wind/src/context/EventContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst EventContext = createContext();\nconst API_URL = 'http://localhost:5000/api';\n\nexport const EventProvider = ({ children }) => {\n    const [events, setEvents] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    // Fetch all events\n    const fetchEvents = async () => {\n        setLoading(true);\n        try {\n            const response = await axios.get(`${API_URL}/events`);\n            setEvents(response.data);\n            setError(null);\n        } catch (error) {\n            setError(error.response?.data?.message || 'Error fetching events');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Create new event\n    const createEvent = async (eventData) => {\n        setLoading(true);\n        try {\n            const response = await axios.post(`${API_URL}/events`, eventData);\n            setEvents(prevEvents => [...prevEvents, response.data]);\n            setError(null);\n            return response.data;\n        } catch (error) {\n            setError(error.response?.data?.message || 'Error creating event');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Register for event\n    const registerForEvent = async (eventId) => {\n        setLoading(true);\n        try {\n            const response = await axios.post(`${API_URL}/events/${eventId}/register`);\n            setEvents(prevEvents =>\n                prevEvents.map(event =>\n                    event._id === eventId ? response.data.event : event\n                )\n            );\n            setError(null);\n            return response.data;\n        } catch (error) {\n            setError(error.response?.data?.message || 'Error registering for event');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Unregister from event\n    const unregisterFromEvent = async (eventId) => {\n        setLoading(true);\n        try {\n            const response = await axios.post(`${API_URL}/events/${eventId}/unregister`);\n            setEvents(prevEvents =>\n                prevEvents.map(event =>\n                    event._id === eventId ? response.data.event : event\n                )\n            );\n            setError(null);\n            return response.data;\n        } catch (error) {\n            setError(error.response?.data?.message || 'Error unregistering from event');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Get user's registered events\n    const getUserRegisteredEvents = async () => {\n        setLoading(true);\n        try {\n            const response = await axios.get(`${API_URL}/events/user/registered`);\n            setError(null);\n            return response.data;\n        } catch (error) {\n            setError(error.response?.data?.message || 'Error fetching registered events');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Get user's created events\n    const getUserCreatedEvents = async () => {\n        setLoading(true);\n        try {\n            const response = await axios.get(`${API_URL}/events/user/created`);\n            setError(null);\n            return response.data;\n        } catch (error) {\n            setError(error.response?.data?.message || 'Error fetching created events');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Fetch events on mount\n    useEffect(() => {\n        fetchEvents();\n    }, []);\n\n    return (\n        <EventContext.Provider value={{\n            events,\n            loading,\n            error,\n            createEvent,\n            registerForEvent,\n            unregisterFromEvent,\n            getUserRegisteredEvents,\n            getUserCreatedEvents,\n            fetchEvents\n        }}>\n            {children}\n        </EventContext.Provider>\n    );\n};\n\nexport const useEvents = () => {\n    const context = useContext(EventContext);\n    if (!context) {\n        throw new Error('useEvents must be used within an EventProvider');\n    }\n    return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}